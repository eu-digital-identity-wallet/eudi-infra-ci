name: SAST - SonarCloud (Swift + Coverage)

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: false
      SONAR_TOKEN:
        required: true
      DOJO_TOKEN: 
        required: false
      DOJO_URL: 
        required: false

jobs:
  SAST:
    name: SAST - SonarCloud analysis (Swift)
    runs-on: macos-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup project key
        run: echo "PROJECTKEY=${{ github.repository_owner}}_$(echo ${{ github.repository }} | sed 's/.*\///')" >> $GITHUB_ENV

      # -------- DETECT PROJECT TYPE --------
      - name: Detect project type
        id: detect
        run: |
          set -euo pipefail
          # Look for Xcode workspace/project
          WORKSPACE=$(find . -name "*.xcworkspace" | head -n 1 || true)
          PROJECT=$(find . -name "*.xcodeproj" | head -n 1 || true)
          PACKAGE=$(find . -name "Package.swift" | head -n 1 || true)

          echo "Detected workspace: $WORKSPACE"
          echo "Detected project: $PROJECT"
          echo "Detected package: $PACKAGE"

          if [[ -n "$WORKSPACE" || -n "$PROJECT" ]]; then
            PROJECT_TYPE="xcode"
            if [[ -n "$WORKSPACE" ]]; then
              echo "workspace=$WORKSPACE" >> $GITHUB_OUTPUT
            else
              echo "project=$PROJECT" >> $GITHUB_OUTPUT
            fi
            # detect first scheme
            if [[ -n "$WORKSPACE" ]]; then
              SCHEME=$(xcodebuild -list -json -workspace "$WORKSPACE" | jq -r '.workspace.schemes[0]')
            else
              SCHEME=$(xcodebuild -list -json -project "$PROJECT" | jq -r '.project.schemes[0]')
            fi
            [[ -n "$SCHEME" ]] || { echo "Error: no scheme found"; exit 1; }
            echo "scheme=$SCHEME" >> $GITHUB_OUTPUT
          elif [[ -n "$PACKAGE" ]]; then
            PROJECT_TYPE="swiftpm"
          else
            echo "Error: no Xcode project/workspace or Package.swift found"
            exit 1
          fi

          echo "project_type=$PROJECT_TYPE" >> $GITHUB_OUTPUT

      # -------- RUN TESTS & GENERATE COVERAGE --------
      - name: Run tests with coverage
        run: |
          set -euo pipefail
          if [[ "${{ steps.detect.outputs.project_type }}" == "xcode" ]]; then
            DEST=$(xcrun simctl list devices available | grep "iPhone" | head -n 1 | awk -F'[()]' '{print $2}')
            if [[ -n "${{ steps.detect.outputs.workspace }}" ]]; then
              xcodebuild \
                -scheme "${{ steps.detect.outputs.scheme }}" \
                -workspace "${{ steps.detect.outputs.workspace }}" \
                -sdk iphonesimulator \
                -destination "platform=iOS Simulator,id=$DEST" \
                -enableCodeCoverage YES \
                clean test
            else
              xcodebuild \
                -scheme "${{ steps.detect.outputs.scheme }}" \
                -project "${{ steps.detect.outputs.project }}" \
                -sdk iphonesimulator \
                -destination "platform=iOS Simulator,id=$DEST" \
                -enableCodeCoverage YES \
                clean test
            fi

            # Convert xcode coverage to Sonar format
            curl -sSL https://raw.githubusercontent.com/SonarSource/sonar-scanning-examples/master/swift-coverage/xccov-to-sonarqube-generic.sh -o xccov-to-sonarqube-generic.sh
            chmod +x xccov-to-sonarqube-generic.sh

            RESULT_BUNDLE=$(find ~/Library/Developer/Xcode/DerivedData -type d -name "*.xcresult" | head -n 1)
            ./xccov-to-sonarqube-generic.sh "$RESULT_BUNDLE" > sonar-generic-coverage.xml
          else
            # Swift Package
            swift test --enable-code-coverage
            # Generate llvm-cov lcov report
            TEST_TARGET=$(swift package show-dependencies --format json | jq -r '.products[0].name')
            PROFDATA=$(find .build -name "*.profdata" | head -n 1)
            EXECUTABLE=$(find .build/debug -name "*Tests.xctest" | head -n 1)
            xcrun llvm-cov export -instr-profile="$PROFDATA" "$EXECUTABLE" > sonar-generic-coverage.xml
          fi

      # -------- SONARCLOUD SCAN --------
      - name: SonarCloud Scan - Push or Workflow Dispatch
        if: (github.event_name == 'push'|| github.event_name == 'workflow_dispatch')
        uses: SonarSource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ env.PROJECTKEY }}
            -Dsonar.coverageReportPaths=sonar-generic-coverage.xml
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Scan - Pull Request Analysis
        if: (github.event_name == 'pull_request_target')
        uses: SonarSource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ env.PROJECTKEY }}
            -Dsonar.coverageReportPaths=sonar-generic-coverage.xml
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
