name: SAST - SonarCloud (Swift + Coverage)

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: false
      SONAR_TOKEN:
        required: true
      DOJO_TOKEN:
        required: false
      DOJO_URL:
        required: false

jobs:
  SAST:
    name: Swift + iOS SAST
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup project key
        run: echo "PROJECTKEY=${{ github.repository_owner }}_$(echo ${{ github.repository }} | sed 's/.*\///')" >> $GITHUB_ENV

      # Auto-detect scheme/workspace/project
      - name: Detect Xcode scheme/workspace/project
        id: detect
        run: |
          set -euo pipefail

          if ls *.xcworkspace 1>/dev/null 2>&1; then
            WORKSPACE=$(ls *.xcworkspace | head -n1)
            SCHEME=$(xcodebuild -list -workspace "$WORKSPACE" -json | jq -r '.workspace.schemes[0]')
            echo "workspace=$WORKSPACE" >> $GITHUB_OUTPUT
            echo "scheme=$SCHEME" >> $GITHUB_OUTPUT
          elif ls *.xcodeproj 1>/dev/null 2>&1; then
            PROJECT=$(ls *.xcodeproj | head -n1)
            SCHEME=$(xcodebuild -list -project "$PROJECT" -json | jq -r '.project.schemes[0]')
            echo "project=$PROJECT" >> $GITHUB_OUTPUT
            echo "scheme=$SCHEME" >> $GITHUB_OUTPUT
          elif [ -f Package.swift ]; then
            echo "Detected Swift Package"
          else
            echo "No workspace/project/Package.swift found"
            exit 1
          fi

      # Run tests with coverage
      - name: Run tests with code coverage
        run: |
          set -euo pipefail

          if [[ -n "${{ steps.detect.outputs.workspace }}" ]]; then
            DEST=$(xcrun simctl list devices available | grep "iPhone" | head -n1 | awk -F'[()]' '{print $2}')
            xcodebuild \
              -workspace "${{ steps.detect.outputs.workspace }}" \
              -scheme "${{ steps.detect.outputs.scheme }}" \
              -sdk iphonesimulator \
              -destination "platform=iOS Simulator,id=$DEST" \
              -enableCodeCoverage YES \
              -resultBundlePath ./test_result \
              clean test
          elif [[ -n "${{ steps.detect.outputs.project }}" ]]; then
            DEST=$(xcrun simctl list devices available | grep "iPhone" | head -n1 | awk -F'[()]' '{print $2}')
            xcodebuild \
              -project "${{ steps.detect.outputs.project }}" \
              -scheme "${{ steps.detect.outputs.scheme }}" \
              -sdk iphonesimulator \
              -destination "platform=iOS Simulator,id=$DEST" \
              -enableCodeCoverage YES \
              -resultBundlePath ./test_result \
              clean test
          elif [ -f Package.swift ]; then
            swift test --enable-code-coverage
          fi

      # Convert coverage to Sonar format
      - name: Convert coverage to Sonar format
        if: ${{ steps.detect.outputs.workspace || steps.detect.outputs.project }}
        run: |
          set -euo pipefail
          bash xccov-to-sonarqube-generic.sh ./test_result.xcresult/ > sonar-coverage.xml
          ls -l sonar-coverage.xml

      # SonarCloud Scan (push/workflow_dispatch)
      - name: SonarCloud Scan - Push/Dispatch
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: SonarSource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ env.PROJECTKEY }}
            -Dsonar.coverageReportPaths=sonar-coverage.xml
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # SonarCloud Scan (pull_request)
      - name: SonarCloud Scan - Pull Request
        if: github.event_name == 'pull_request_target'
        uses: SonarSource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ env.PROJECTKEY }}
            -Dsonar.coverageReportPaths=sonar-coverage.xml
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
