name: SAST - SonarCloud (Swift + Coverage)

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: false
      SONAR_TOKEN:
        required: true
      DOJO_TOKEN:
        required: false
      DOJO_URL:
        required: false

jobs:
  SAST:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup project key
        run: echo "PROJECTKEY=${{ github.repository_owner }}_$(echo ${{ github.repository }} | sed 's/.*\///')" >> $GITHUB_ENV

      - name: Detect build type
        id: detect
        run: |
          set -euo pipefail
          if ls *.xcworkspace 1>/dev/null 2>&1; then
            echo "type=Xcode" >> $GITHUB_OUTPUT
            WORKSPACE=$(ls *.xcworkspace | head -n1)
            SCHEME=$(xcodebuild -list -workspace "$WORKSPACE" -json | jq -r '.workspace.schemes[0]')
            echo "workspace=$WORKSPACE" >> $GITHUB_OUTPUT
            echo "scheme=$SCHEME" >> $GITHUB_OUTPUT
          elif ls *.xcodeproj 1>/dev/null 2>&1; then
            echo "type=Xcode" >> $GITHUB_OUTPUT
            PROJECT=$(ls *.xcodeproj | head -n1)
            SCHEME=$(xcodebuild -list -project "$PROJECT" -json | jq -r '.project.schemes[0]')
            echo "project=$PROJECT" >> $GITHUB_OUTPUT
            echo "scheme=$SCHEME" >> $GITHUB_OUTPUT
          elif [ -f Package.swift ]; then
            echo "type=SwiftPackage" >> $GITHUB_OUTPUT
          else
            echo "type=None" >> $GITHUB_OUTPUT
          fi

      - name: Run tests with coverage
        run: |
          set -euo pipefail
          TYPE="${{ steps.detect.outputs.type }}"
          if [ "$TYPE" = "Xcode" ]; then
            DEST=$(xcrun simctl list devices available | grep "iPhone" | head -n1 | awk -F'[()]' '{print $2}')
            if [ -n "${{ steps.detect.outputs.workspace }}" ]; then
              xcodebuild -workspace "${{ steps.detect.outputs.workspace }}" \
                         -scheme "${{ steps.detect.outputs.scheme }}" \
                         -sdk iphonesimulator \
                         -destination "platform=iOS Simulator,id=$DEST" \
                         -enableCodeCoverage YES \
                         -resultBundlePath ./test_result \
                         clean test
            else
              xcodebuild -project "${{ steps.detect.outputs.project }}" \
                         -scheme "${{ steps.detect.outputs.scheme }}" \
                         -sdk iphonesimulator \
                         -destination "platform=iOS Simulator,id=$DEST" \
                         -enableCodeCoverage YES \
                         -resultBundlePath ./test_result \
                         clean test
            fi
          elif [ "$TYPE" = "SwiftPackage" ]; then
            swift test --enable-code-coverage
          fi

      - name: Fetch coverage conversion script
        run: |
          curl -fSL https://raw.githubusercontent.com/eu-digital-identity-wallet/eudi-infra-ci/feat/swift_coverage/ci-scripts/xccov-to-sonarqube-generic.sh \
               -o ./xccov-to-sonarqube-generic.sh
          chmod +x ./xccov-to-sonarqube-generic.sh

      - name: Convert coverage to Sonar format and upload raw coverage
        run: |
          set -euo pipefail
          TYPE="${{ steps.detect.outputs.type }}"

          mkdir -p coverage_raw

          if [ "$TYPE" = "Xcode" ]; then
            echo "Copying raw .xcresult bundle for artifact..."
            cp -r ./test_result.xcresult coverage_raw/

            echo "Converting coverage to sonar-coverage.xml..."
            bash ./xccov-to-sonarqube-generic.sh ./test_result.xcresult/ > sonar-coverage.xml || echo '<coverage/>' > sonar-coverage.xml

            echo "Preview of converted coverage (first 20 lines):"
            head -n 20 sonar-coverage.xml

          elif [ "$TYPE" = "SwiftPackage" ]; then
            PROFDATA=$(find . -name "*.profdata" | head -n1)
            EXECUTABLES=$(find .build/debug -type f -perm +111)
            if [ -n "$PROFDATA" ] && [ -n "$EXECUTABLES" ]; then
              cp "$PROFDATA" coverage_raw/
              echo "Converting coverage to sonar-coverage.xml..."
              llvm-cov export -instr-profile="$PROFDATA" $EXECUTABLES -format=lcov \
                | lcov-to-sonarxml -o sonar-coverage.xml || echo '<coverage/>' > sonar-coverage.xml
              echo "Preview of converted coverage (first 20 lines):"
              head -n 20 sonar-coverage.xml
            else
              echo '<coverage/>' > sonar-coverage.xml
            fi
          else
            echo '<coverage/>' > sonar-coverage.xml
          fi

      - name: Upload raw coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-raw
          path: coverage_raw/

      - name: SonarCloud Scan - Push/Dispatch
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: SonarSource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ env.PROJECTKEY }}
            -Dsonar.coverageReportPaths=sonar-coverage.xml
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Scan - Pull Request
        if: github.event_name == 'pull_request_target'
        uses: SonarSource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ env.PROJECTKEY }}
            -Dsonar.coverageReportPaths=sonar-coverage.xml
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
