name: SAST - SonarCloud (Action)

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: false
      SONAR_TOKEN:
        required: true
      DOJO_TOKEN: 
        required: false
      DOJO_URL: 
        required: false

jobs:

  check_secret:
    name: Check secret presence
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ -z "$SONAR_TOKEN" ]]; then
            echo "SONAR_TOKEN missing"; exit 1
          else
            echo "Secret exists. The workflow will continue"
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  coverage:
    name: Build & Coverage
    runs-on: macos-14
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - uses: actions/checkout@v4

      # Run Fastlane lane (tests only, do not call xcov)
      - name: Run Fastlane code_coverage
        run: fastlane code_coverage
        env:
          CI: true
          SKIP_XCOV: true   # optional: if Fastfile supports skipping xcov in CI

      # Locate the generated .xcresult
      - name: Locate xcresult
        run: |
          mkdir -p sonar-reports
          XCRESULT=$(find xcov_output -name "*.xcresult" | head -n 1)
          echo "XCRESULT=$XCRESULT" >> $GITHUB_ENV

      # Convert .xcresult -> Sonar XML using internal script
      - name: Convert coverage to Sonar XML
        run: |
          bash ci-scripts/xccov-to-sonarqube-generic.sh "$XCRESULT" > sonar-reports/coverage.xml

      # Upload XML artifact for the SAST job
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: sonar-reports/coverage.xml

  SAST:
    name: SAST - SonarCloud analysis
    needs: [check_secret, coverage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download coverage report from previous job
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: sonar-reports

      # Setup project key
      - name: Setup project key
        run: echo "PROJECTKEY=${{ github.repository_owner}}_$(echo ${{ github.repository }} | sed 's/.*\///')" >> $GITHUB_ENV

      # Run SonarCloud analysis with coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ env.PROJECTKEY }}
            -Dsonar.swift.coverage.reportPaths=sonar-reports/coverage.xml
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Send report to DefectDojo
        if: ${{ secrets.DOJO_TOKEN && secrets.DOJO_URL }}
        run: |
          export "SCAN_DATE=$(TZ='EET' date '+%Y-%m-%d')"
          curl -X POST "$DOJO_URL/api/v2/reimport-scan/" \
            -H "Authorization: Token $DOJO_TOKEN" \
            -F "active=true" \
            -F "scan_type=SonarQube Scan detailed" \
            -F "minimum_severity=Info" \
            -F "skip_duplicates=true" \
            -F "close_old_findings=true" \
            -F "file=@sonar-reports/coverage.xml" \
            -F "scan_date=$SCAN_DATE" \
            -F "auto_create_context=True" \
            -F "product_name=${{ github.repository }}-${{ github.ref_name }}" \
            -F "engagement_name=Static Application Security Testing - ${{ github.repository }}-${{ github.ref_name }}"
        env:
          DOJO_TOKEN: ${{ secrets.DOJO_TOKEN }}
          DOJO_URL: ${{ secrets.DOJO_URL }}
