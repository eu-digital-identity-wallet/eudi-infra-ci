name: SCA - Dependency Check (CLI)
on:
  workflow_call:
    secrets:
      NVD_API_KEY:
        required: false
      DOJO_TOKEN: 
        required: false
      DOJO_URL: 
        required: false
        
jobs:

  SCA:
   name: SCA - Dependency Check Analysis (CLI)
   runs-on: ubuntu-latest
   env:
     DEP_CHECK_VERSION: '12.0.0'
   steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
    # Caches the /data directory of Dependency Check which holds the local copy of NVD
      - name: Cache Dependency Check Data
        uses: actions/cache@v4
        with:
          path: dependency-check/data
          key: dependency-check-data-${{ runner.os }}-${{ env.DEP_CHECK_VERSION }}
          restore-keys: |
            dependency-check-data-${{ runner.os }}-${{ env.TOOL_VERSION }}-
            dependency-check-data-${{ runner.os }}-
            
    # Caches dependency-check's directory to avoid downloading the tool every time
      - name: Cache Dependency Check CLI
        uses: actions/cache@v4
        with:
          path: dependency-check
          key: dependency-check-cli-${{ env.DEP_CHECK_VERSION }}
          restore-keys: |
            dependency-check-cli-
            
     # Runs the dependency-check.sh script. If it does not exist (e.g. restored from cache), download the tool and run it
      - name: Dependency Check Scan - CLI
        run: |
         sudo gem install bundler-audit
          if [[ -f "dependency-check/bin/dependency-check.sh" ]]; then
             bash dependency-check/bin/dependency-check.sh --enableExperimental --enableRetired --nvdApiKey $NVD_API_KEY -s . -f XML -f HTML --project ${{ github.repository }}
          else
             wget https://github.com/dependency-check/DependencyCheck/releases/download/v${{ env.DEP_CHECK_VERSION }}/dependency-check-${{ env.DEP_CHECK_VERSION }}-release.zip
             unzip dependency-check-${{ env.DEP_CHECK_VERSION }}-release.zip
             bash dependency-check/bin/dependency-check.sh --enableExperimental --enableRetired --nvdApiKey $NVD_API_KEY -s . -f XML -f HTML --project ${{ github.repository }}
          fi
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
          
      # Uploads the results of the tool as artifact
      - name: Upload results - SCA
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/dependency-check-report.html

      # Posts the result of the scan to DefectDojo
      - name: Send report to DefectDojo
        if: (github.repository_owner == 'eu-digital-identity-wallet' && github.ref_name == 'main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch'))
        run: |
          export "SCAN_DATE=$(TZ='EET' date '+%Y-%m-%d')"
          curl -X POST "$DOJO_URL/api/v2/reimport-scan/" \
                            -H "Authorization: Token $DOJO_TOKEN" \
                            -F "active=true" \
                            -F "scan_type=Dependency Check Scan" \
                            -F "minimum_severity=Info" \
                            -F "skip_duplicates=true" \
                            -F "close_old_findings=true" \
                            -F "file=@dependency-check-report.xml" \
                            -F "scan_date=$SCAN_DATE" \
                            -F "auto_create_context=True" \
                            -F "product_name=${{ github.repository }}-${{ github.ref_name }}" \
                            -F "engagement_name=Software Composition Analysis - ${{ github.repository }}-${{ github.ref_name }}"
        env:
         DOJO_TOKEN: ${{ secrets.DOJO_TOKEN }}
         DOJO_URL: ${{ secrets.DOJO_URL }}
