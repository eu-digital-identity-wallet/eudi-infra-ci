name: SAST - SonarCloud (Action)
on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: false
      SONAR_TOKEN:
        required: true
      DOJO_TOKEN: 
        required: false
      DOJO_URL: 
        required: false
        
jobs:

  check_secret:
    name: Check secret presence
    runs-on: ubuntu-latest
    steps:
    - run: if [[ -z "$SONAR_TOKEN" ]]; then exit 1; else echo "Secret exists. The workflow will be continued"; fi
    env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  SAST:
    name: SAST - SonarCloud analysis
    needs: check_secret
    runs-on: ubuntu-latest
    steps:
      - name: Checkout action
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
         #ref: ${{ github.event.pull_request.head.sha }}
      - name: setup projectkey
        run: echo "PROJECTKEY=${{ github.repository_owner}}_$(echo ${{ github.repository }} | sed 's/.*\///')" >> $GITHUB_ENV
      - name: SonarCloud Scan - GH Action - Push or Workflow Dispatch
        if: (github.event_name == 'push'|| github.event_name == 'workflow_dispatch')
        uses: SonarSource/sonarcloud-github-action@master
        with:
            args: >
                -Dsonar.organization=${{ github.repository_owner }}
                -Dsonar.projectKey=${{ env.PROJECTKEY }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: SonarCloud Scan - GH Action - Pull Request Analysis
        if: (github.event_name == 'pull_request_target')
        uses: SonarSource/sonarcloud-github-action@master
        with:
            args: >
                -Dsonar.organization=${{ github.repository_owner }}
                -Dsonar.projectKey=${{ env.PROJECTKEY }}
                -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
                -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
                -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

          
      - name: Setup Node 
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install "sonar-report"  and run it
        run: |
          npm cache clean --force
          npm install -g sonar-report@3.0.10
          export "PROJECTKEY=${{ github.repository_owner}}_$(echo ${{ github.repository }} | sed 's/.*\///')"
          sonar-report \
           --sonarurl="https://sonarcloud.io" \
           --sonarorganization="${{ github.repository_owner }}" \
           --branch="${{ github.ref_name }}" \
           --sonartoken="${{ secrets.SONAR_TOKEN }}" \
           --output sonarreport.html \
           --application="$PROJECTKEY" \
           --sonarcomponent="$PROJECTKEY"
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Send report to DefectDojo
        if: (github.repository_owner == 'eu-digital-identity-wallet' && github.ref_name == 'main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')) 
        run: |
          curl -s https://raw.githubusercontent.com/eu-digital-identity-wallet/eudi-infra-ci/main/engagementids.json > engagementids.json
          export "ID=$(jq '."${{ github.repository }}".${{ github.ref_name }}.sastID' engagementids.json)"
          export "SCAN_DATE=$(TZ='EET' date '+%Y-%m-%d')"
          curl -X POST "$DOJO_URL/api/v2/reimport-scan/" \
                            -H "Authorization: Token $DOJO_TOKEN" \
                            -F "active=true" \
                            -F "scan_type=SonarQube Scan detailed" \
                            -F "minimum_severity=Info" \
                            -F "skip_duplicates=true" \
                            -F "close_old_findings=true" \
                            -F "file=@sonarreport.html" \
                            -F "scan_date=$SCAN_DATE" \
                            -F "auto_create_context=True" \
                            -F "product_name=${{ github.repository }}-${{ github.ref_name }}" \
                            -F "engagement_name=Static Application Security Testing - ${{ github.repository }}-${{ github.ref_name }}" 
        env:
         DOJO_TOKEN: ${{ secrets.DOJO_TOKEN }}
         DOJO_URL: ${{ secrets.DOJO_URL }}
